<?php

use Laravel\Lumen\Testing\DatabaseMigrations;
use Laravel\Lumen\Testing\DatabaseTransactions;

class UrlConverterTest extends TestCase {

    private $converter;

    protected function setUp(): void {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->converter = new \App\Actions\UrlConverter();
    }

    //    0  0   |   10  a   |   20  k   |   30  u   |   40  E   |   50  O   |    60  Y
    //    1  1   |   11  b   |   21  l   |   31  v   |   41  F   |   51  P   |    61  Z
    //    2  2   |   12  c   |   22  m   |   32  w   |   42  G   |   52  Q   |
    //    3  3   |   13  d   |   23  n   |   33  x   |   43  H   |   53  R   |
    //    4  4   |   14  e   |   24  o   |   34  y   |   44  I   |   54  S   |
    //    5  5   |   15  f   |   25  p   |   35  z   |   45  J   |   55  T   |
    //    6  6   |   16  g   |   26  q   |   36  A   |   46  K   |   56  U   |
    //    7  7   |   17  h   |   27  r   |   37  B   |   47  L   |   57  V   |
    //    8  8   |   18  i   |   28  s   |   38  C   |   48  M   |   58  W   |
    //    9  9   |   19  j   |   29  t   |   39  D   |   49  N   |   59  X   |

    /** @test */
    public function expected_dec_is_return_for_hash() {
        $this->assertEquals( 0, $this->converter->toDec( "0" ) );
        $this->assertEquals( 1, $this->converter->toDec( "1" ) );
        $this->assertEquals( 9, $this->converter->toDec( "9" ) );
        $this->assertEquals( 10, $this->converter->toDec( "a" ) );
        $this->assertEquals( 34, $this->converter->toDec( "y" ) );
        $this->assertEquals( 36, $this->converter->toDec( "A" ) );
        $this->assertEquals( 61, $this->converter->toDec( "Z" ) );
        $this->assertEquals( 62, $this->converter->toDec( "10" ) );
        $this->assertEquals( 453, $this->converter->toDec( "7j" ) );
        $this->assertEquals( 238328, $this->converter->toDec( "1000" ) );
        $this->assertEquals( 925164, $this->converter->toDec( "3SG0" ) );
    }

    /** @test */
    public function expected_hash_is_return_for_dec() {
        $this->assertEquals( "0", $this->converter->toHash( 0 ) );
        $this->assertEquals( "1", $this->converter->toHash( 1 ) );
        $this->assertEquals( "5", $this->converter->toHash( 5 ) );
        $this->assertEquals( "9", $this->converter->toHash( 9 ) );
        $this->assertEquals( "a", $this->converter->toHash( 10 ) );
        $this->assertEquals( "k", $this->converter->toHash( 20 ) );
        $this->assertEquals( "p", $this->converter->toHash( 25 ) );
        $this->assertEquals( "y", $this->converter->toHash( 34 ) );
        $this->assertEquals( "A", $this->converter->toHash( 36 ) );
        $this->assertEquals( "B", $this->converter->toHash( 37 ) );
        $this->assertEquals( "J", $this->converter->toHash( 45 ) );
        $this->assertEquals( "U", $this->converter->toHash( 56 ) );
        $this->assertEquals( "Z", $this->converter->toHash( 61 ) );
        $this->assertEquals( "10", $this->converter->toHash( 62 ) );
        $this->assertEquals( "1Z", $this->converter->toHash( 123 ) );
        $this->assertEquals( "3V", $this->converter->toHash( 243 ) );
        $this->assertEquals( "7j", $this->converter->toHash( 453 ) );
        $this->assertEquals( "3SG0", $this->converter->toHash( 925164 ) );
    }
}
